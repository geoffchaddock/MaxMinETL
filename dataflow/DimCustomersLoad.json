{
	"name": "DimCustomersLoad",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CustomersDS",
						"type": "DatasetReference"
					},
					"name": "SourceCustomers"
				},
				{
					"dataset": {
						"referenceName": "DimCustomersDS",
						"type": "DatasetReference"
					},
					"name": "ExistingCustomers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimCustomersDS",
						"type": "DatasetReference"
					},
					"name": "DestCustomers"
				}
			],
			"transformations": [
				{
					"name": "MatchCustomers"
				},
				{
					"name": "ConditionalSplitCustomerNotMatched"
				},
				{
					"name": "SCDColumns"
				},
				{
					"name": "HaveColumnsChanged"
				}
			],
			"scriptLines": [
				"source(output(",
				"          AccountNumber as integer,",
				"          FirstName as string,",
				"          MiddleInitial as string,",
				"          LastName as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          NumberOfCarsOwned as integer,",
				"          HomeOwnerFlag as string,",
				"          Married as string,",
				"          NumberOfChildren as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SourceCustomers",
				"source(output(",
				"          CustomerPK as integer,",
				"          AccountNumber as integer,",
				"          FirstName as string,",
				"          MiddleInitial as string,",
				"          LastName as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          NumberOfCarsOwned as integer,",
				"          HomeOwnerFlag as string,",
				"          Married as string,",
				"          NumberOfChildren as integer,",
				"          InsertedDate as timestamp,",
				"          UpdatedDate as timestamp,",
				"          ActiveFlag as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table',",
				"     staged: true) ~> ExistingCustomers",
				"SourceCustomers, ExistingCustomers lookup(SourceCustomers@AccountNumber == ExistingCustomers@AccountNumber,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> MatchCustomers",
				"MatchCustomers split(isNull(ExistingCustomers@AccountNumber) == true(),",
				"     disjoint: false) ~> ConditionalSplitCustomerNotMatched@(CustomerNotMatched, CustomerMatched)",
				"ConditionalSplitCustomerNotMatched@CustomerNotMatched derive(ActiveFlag = 1,",
				"          InsertedDate = currentDate()) ~> SCDColumns",
				"ConditionalSplitCustomerNotMatched@CustomerMatched, ExistingCustomers join(ConditionalSplitCustomerNotMatched@CustomerMatched@AccountNumber == ExistingCustomers@AccountNumber",
				"     && ConditionalSplitCustomerNotMatched@CustomerMatched@LastName == ExistingCustomers@LastName",
				"     && ConditionalSplitCustomerNotMatched@CustomerMatched@Address == ExistingCustomers@Address",
				"     && ConditionalSplitCustomerNotMatched@CustomerMatched@City == ExistingCustomers@City",
				"     && ConditionalSplitCustomerNotMatched@CustomerMatched@NumberOfCarsOwned == ExistingCustomers@NumberOfCarsOwned,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'right')~> HaveColumnsChanged",
				"SCDColumns sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerPK as integer,",
				"          AccountNumber as integer,",
				"          FirstName as string,",
				"          MiddleInitial as string,",
				"          LastName as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          NumberOfCarsOwned as integer,",
				"          HomeOwnerFlag as string,",
				"          Married as string,",
				"          NumberOfChildren as integer,",
				"          InsertedDate as timestamp,",
				"          UpdatedDate as timestamp,",
				"          ActiveFlag as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AccountNumber = ConditionalSplitCustomerNotMatched@CustomerNotMatched@AccountNumber,",
				"          FirstName = ConditionalSplitCustomerNotMatched@CustomerNotMatched@FirstName,",
				"          MiddleInitial = ConditionalSplitCustomerNotMatched@CustomerNotMatched@MiddleInitial,",
				"          LastName = ConditionalSplitCustomerNotMatched@CustomerNotMatched@LastName,",
				"          Address = ConditionalSplitCustomerNotMatched@CustomerNotMatched@Address,",
				"          City = ConditionalSplitCustomerNotMatched@CustomerNotMatched@City,",
				"          State = ConditionalSplitCustomerNotMatched@CustomerNotMatched@State,",
				"          ZipCode = ConditionalSplitCustomerNotMatched@CustomerNotMatched@ZipCode,",
				"          NumberOfCarsOwned = ConditionalSplitCustomerNotMatched@CustomerNotMatched@NumberOfCarsOwned,",
				"          HomeOwnerFlag = ConditionalSplitCustomerNotMatched@CustomerNotMatched@HomeOwnerFlag,",
				"          Married = ConditionalSplitCustomerNotMatched@CustomerNotMatched@Married,",
				"          NumberOfChildren = ConditionalSplitCustomerNotMatched@CustomerNotMatched@NumberOfChildren,",
				"          InsertedDate,",
				"          UpdatedDate,",
				"          ActiveFlag",
				"     )) ~> DestCustomers"
			]
		}
	}
}