{
	"name": "DumCustomerSCD2Load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "EmployeeFiles",
						"type": "DatasetReference"
					},
					"name": "Customers",
					"description": " Source employees file, changes every day"
				},
				{
					"dataset": {
						"referenceName": "Delete",
						"type": "DatasetReference"
					},
					"name": "DimCustomers",
					"description": "Current rows in DimEmployees DW table"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimCustomersTmp",
						"type": "DatasetReference"
					},
					"name": "NewRows"
				},
				{
					"dataset": {
						"referenceName": "DimCustomersTmp",
						"type": "DatasetReference"
					},
					"name": "InsertNewRow"
				},
				{
					"dataset": {
						"referenceName": "DimCustomersTmp",
						"type": "DatasetReference"
					},
					"name": "ArchiveOldRow"
				}
			],
			"transformations": [
				{
					"name": "TypeConversions"
				},
				{
					"name": "TypeConversionsAndSetAttrs"
				},
				{
					"name": "LookupIDs"
				},
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "checkForChanges"
				},
				{
					"name": "SetAttrsForNew"
				},
				{
					"name": "SetAttrsInactive",
					"description": "make iscurrent 0"
				},
				{
					"name": "SetAttrsUpdate"
				},
				{
					"name": "NormNames"
				},
				{
					"name": "InactiveFields"
				},
				{
					"name": "ArchiveCustomerRec"
				},
				{
					"name": "NullFilter",
					"description": "Filter out NULLs from source file"
				},
				{
					"name": "NameNorm2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          AccountNumber as string,",
				"          FirstName as string,",
				"          MiddleInitial as string,",
				"          LastName as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          NumberOfCarsOwned as string,",
				"          HomeOwnerFlag as string,",
				"          Married as string,",
				"          NumberOfChildren as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Customers",
				"source(output(",
				"          CustomerPK as integer,",
				"          AccountNumber as integer,",
				"          FirstName as string,",
				"          MiddleInitial as string,",
				"          LastName as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          NumberOfCarsOwned as integer,",
				"          HomeOwnerFlag as string,",
				"          Married as string,",
				"          NumberOfChildren as integer,",
				"          InsertedDate as timestamp,",
				"          UpdatedDate as timestamp,",
				"          ActiveFlag as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimCustomers",
				"DimCustomers derive(AccountNumber = toInteger(AccountNumber),",
				"          CustomerPK = toInteger(CustomerPK)) ~> TypeConversions",
				"NullFilter derive(AccountNumber = toInteger(AccountNumber),",
				"          NumberOfCarsOwned = toInteger(NumberOfCarsOwned),",
				"          NumberOfChildren = toInteger(NumberOfChildren)) ~> TypeConversionsAndSetAttrs",
				"TypeConversionsAndSetAttrs, TypeConversions lookup(TypeConversionsAndSetAttrs@AccountNumber == TypeConversions@AccountNumber,",
				"     multiple: true,",
				"     broadcast: 'auto')~> LookupIDs",
				"NormNames split(isNull(iscurrent),",
				"     disjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)",
				"NameNorm2, TypeConversions exists((toInteger(NameNorm2@AccountNumber) == toInteger(TypeConversions@AccountNumber)) && \r",
				"(ActiveFlag == 1) &&\r",
				"(\r",
				"   (NameNorm2@NumberOfCarsOwned != DimCustomers@NumberOfCarsOwned) || \r",
				"   (NameNorm2@NumberOfChildren != DimCustomers@NumberOfChildren) ||\r",
				"   (NameNorm2@Married != DimCustomers@Married)\r",
				"),",
				"     negate:false,",
				"     broadcast: 'auto')~> checkForChanges",
				"ConditionalSplit1@NewRow derive(iscurrent = 1,",
				"          InsertedDate = currentTimestamp()) ~> SetAttrsForNew",
				"checkForChanges derive(iscurrent = 0,",
				"          UpdatedDate = currentTimestamp()) ~> SetAttrsInactive",
				"checkForChanges derive(iscurrent = 1) ~> SetAttrsUpdate",
				"LookupIDs select(mapColumn(",
				"          AccountNumber = TypeConversionsAndSetAttrs@AccountNumber,",
				"          FirstName = Customers@FirstName,",
				"          MiddleName = Customers@MiddleInitial,",
				"          LastName = Customers@LastName,",
				"          Address = Customers@Address,",
				"          City = Customers@City,",
				"          State = Customers@State,",
				"          ZipCode = Customers@ZipCode,",
				"          NumberOfCarsOwned = TypeConversionsAndSetAttrs@NumberOfCarsOwned,",
				"          HomeOwnerFlag = Customers@HomeOwnerFlag,",
				"          NumberOfChildren = TypeConversionsAndSetAttrs@NumberOfChildren,",
				"          Married = DimCustomers@Married,",
				"          iscurrent = ActiveFlag,",
				"          InsertedDate",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> NormNames",
				"SetAttrsInactive select(mapColumn(",
				"          AccountNumber,",
				"          iscurrent,",
				"          UpdatedDate",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> InactiveFields",
				"InactiveFields alterRow(updateIf(true())) ~> ArchiveCustomerRec",
				"Customers filter(!isNull(AccountNumber)) ~> NullFilter",
				"ConditionalSplit1@CheckForUpdates select(mapColumn(",
				"          AccountNumber,",
				"          FirstName,",
				"          MiddleName,",
				"          LastName,",
				"          Address,",
				"          City,",
				"          State,",
				"          ZipCode,",
				"          NumberOfCarsOwned,",
				"          HomeOwnerFlag,",
				"          NumberOfChildren,",
				"          Married,",
				"          iscurrent,",
				"          InsertedDate",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> NameNorm2",
				"SetAttrsForNew sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerPK as integer,",
				"          AccountNumber as integer,",
				"          FirstName as string,",
				"          MiddleInitial as string,",
				"          LastName as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          NumberOfCarsOwned as integer,",
				"          HomeOwnerFlag as string,",
				"          Married as string,",
				"          NumberOfChildren as integer,",
				"          InsertedDate as timestamp,",
				"          UpdatedDate as timestamp,",
				"          ActiveFlag as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AccountNumber,",
				"          FirstName,",
				"          MiddleInitial = MiddleName,",
				"          LastName,",
				"          Address,",
				"          City,",
				"          State,",
				"          ZipCode,",
				"          NumberOfCarsOwned,",
				"          HomeOwnerFlag,",
				"          Married,",
				"          NumberOfChildren,",
				"          InsertedDate,",
				"          ActiveFlag = iscurrent",
				"     )) ~> NewRows",
				"SetAttrsUpdate sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerPK as integer,",
				"          AccountNumber as integer,",
				"          FirstName as string,",
				"          MiddleInitial as string,",
				"          LastName as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          NumberOfCarsOwned as integer,",
				"          HomeOwnerFlag as string,",
				"          Married as string,",
				"          NumberOfChildren as integer,",
				"          InsertedDate as timestamp,",
				"          UpdatedDate as timestamp,",
				"          ActiveFlag as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AccountNumber,",
				"          FirstName,",
				"          MiddleInitial = MiddleName,",
				"          LastName,",
				"          Address,",
				"          City,",
				"          State,",
				"          ZipCode,",
				"          NumberOfCarsOwned,",
				"          HomeOwnerFlag,",
				"          Married,",
				"          NumberOfChildren,",
				"          InsertedDate,",
				"          ActiveFlag = iscurrent",
				"     )) ~> InsertNewRow",
				"ArchiveCustomerRec sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerPK as integer,",
				"          AccountNumber as integer,",
				"          FirstName as string,",
				"          MiddleInitial as string,",
				"          LastName as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          NumberOfCarsOwned as integer,",
				"          HomeOwnerFlag as string,",
				"          Married as string,",
				"          NumberOfChildren as integer,",
				"          InsertedDate as timestamp,",
				"          UpdatedDate as timestamp,",
				"          ActiveFlag as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['CustomerPK'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          AccountNumber,",
				"          UpdatedDate,",
				"          ActiveFlag = iscurrent",
				"     )) ~> ArchiveOldRow"
			]
		}
	}
}