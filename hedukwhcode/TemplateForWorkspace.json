{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "hedukwhcode"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"DimCustomerStagingLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DimCustomerStagingLS'"
		},
		"DimCustomers_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DimCustomers'"
		},
		"OrderProcessingSystem_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OrderProcessingSystem'"
		},
		"hedukwhcodeLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'hedukwhcodeLS'"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/DimEmployeePipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadDimEmployee",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DumCustomerSCD2Load",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customers": {},
									"DimCustomers": {},
									"NewRows": {},
									"InsertNewRow": {},
									"ArchiveOldRow": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Demos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DumCustomerSCD2Load')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline 1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DimCustomersLoad",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SourceCustomers": {},
									"ExistingCustomers": {},
									"DestCustomers": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "DimCustomerStagingLS",
									"type": "LinkedServiceReference"
								},
								"folderPath": "maxminetl"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/DimCustomersLoad')]",
				"[concat(variables('workspaceId'), '/linkedServices/DimCustomerStagingLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CustomersDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OrderProcessingSystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AccountNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleInitial",
						"type": "nchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nchar"
					},
					{
						"name": "ZipCode",
						"type": "nchar"
					},
					{
						"name": "NumberOfCarsOwned",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "HomeOwnerFlag",
						"type": "char"
					},
					{
						"name": "Married",
						"type": "char"
					},
					{
						"name": "NumberOfChildren",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customers"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/OrderProcessingSystem')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Delete')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OrderProcessingSystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerPK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleInitial",
						"type": "nchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nchar"
					},
					{
						"name": "ZipCode",
						"type": "nchar"
					},
					{
						"name": "NumberOfCarsOwned",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "HomeOwnerFlag",
						"type": "char"
					},
					{
						"name": "Married",
						"type": "char"
					},
					{
						"name": "NumberOfChildren",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "InsertedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "UpdatedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "ActiveFlag",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomers"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/OrderProcessingSystem')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimCustomersDS')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "hedukwhcodeLS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "CustomerPK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleInitial",
						"type": "nchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nchar"
					},
					{
						"name": "ZipCode",
						"type": "nchar"
					},
					{
						"name": "NumberOfCarsOwned",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "HomeOwnerFlag",
						"type": "char"
					},
					{
						"name": "Married",
						"type": "char"
					},
					{
						"name": "NumberOfChildren",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "InsertedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "UpdatedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "ActiveFlag",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomers"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/hedukwhcodeLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimCustomersTmp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DimCustomers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerPK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AccountNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleInitial",
						"type": "nchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Address",
						"type": "nvarchar"
					},
					{
						"name": "City",
						"type": "nvarchar"
					},
					{
						"name": "State",
						"type": "nchar"
					},
					{
						"name": "ZipCode",
						"type": "nchar"
					},
					{
						"name": "NumberOfCarsOwned",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "HomeOwnerFlag",
						"type": "char"
					},
					{
						"name": "Married",
						"type": "char"
					},
					{
						"name": "NumberOfChildren",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "InsertedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "UpdatedDate",
						"type": "smalldatetime",
						"precision": 16,
						"scale": 0
					},
					{
						"name": "ActiveFlag",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimCustomers"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DimCustomers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimEmp')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DimCustomers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "EmpID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "surrogatekey",
						"type": "nvarchar"
					},
					{
						"name": "Region",
						"type": "nvarchar"
					},
					{
						"name": "Status",
						"type": "nvarchar"
					},
					{
						"name": "EmpFunction",
						"type": "nvarchar"
					},
					{
						"name": "Level",
						"type": "nvarchar"
					},
					{
						"name": "Role",
						"type": "nvarchar"
					},
					{
						"name": "StartDate",
						"type": "date"
					},
					{
						"name": "EndDate",
						"type": "date"
					},
					{
						"name": "iscurrent",
						"type": "int",
						"precision": 10
					},
					{
						"name": "processtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"tableName": "[dbo].[DimCustomers]"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DimCustomers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/EmployeeFiles')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customers.csv",
						"container": "maxminetl"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AccountNumber",
						"type": "String"
					},
					{
						"name": "FirstName",
						"type": "String"
					},
					{
						"name": "MiddleInitial",
						"type": "String"
					},
					{
						"name": "LastName",
						"type": "String"
					},
					{
						"name": "Address",
						"type": "String"
					},
					{
						"name": "City",
						"type": "String"
					},
					{
						"name": "State",
						"type": "String"
					},
					{
						"name": "ZipCode",
						"type": "String"
					},
					{
						"name": "NumberOfCarsOwned",
						"type": "String"
					},
					{
						"name": "HomeOwnerFlag",
						"type": "String"
					},
					{
						"name": "Married",
						"type": "String"
					},
					{
						"name": "NumberOfChildren",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GenericDataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Folder": {
						"type": "string"
					}
				},
				"folder": {
					"name": "SCD"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().Folder",
							"type": "Expression"
						},
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlDimension')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DimCustomers",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/DimCustomers')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimCustomerStagingLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('DimCustomerStagingLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimCustomers')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('DimCustomers_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OrderProcessingSystem')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('OrderProcessingSystem_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/hedukwhcodeLS')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('hedukwhcodeLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DimCustomersLoad')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "CustomersDS",
								"type": "DatasetReference"
							},
							"name": "SourceCustomers"
						},
						{
							"dataset": {
								"referenceName": "DimCustomersDS",
								"type": "DatasetReference"
							},
							"name": "ExistingCustomers"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomersDS",
								"type": "DatasetReference"
							},
							"name": "DestCustomers"
						}
					],
					"transformations": [
						{
							"name": "MatchCustomers"
						},
						{
							"name": "ConditionalSplitCustomerNotMatched"
						},
						{
							"name": "SCDColumns"
						},
						{
							"name": "RenameExistingDSColumns"
						},
						{
							"name": "CreateIsActive"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AccountNumber as integer,",
						"          FirstName as string,",
						"          MiddleInitial as string,",
						"          LastName as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          NumberOfCarsOwned as integer,",
						"          HomeOwnerFlag as string,",
						"          Married as string,",
						"          NumberOfChildren as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SourceCustomers",
						"source(output(",
						"          CustomerPK as integer,",
						"          AccountNumber as integer,",
						"          FirstName as string,",
						"          MiddleInitial as string,",
						"          LastName as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          NumberOfCarsOwned as integer,",
						"          HomeOwnerFlag as string,",
						"          Married as string,",
						"          NumberOfChildren as integer,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          ActiveFlag as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     staged: true) ~> ExistingCustomers",
						"SourceCustomers, ExistingCustomers lookup(SourceCustomers@AccountNumber == ExistingCustomers@AccountNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> MatchCustomers",
						"MatchCustomers split(isNull(ExistingCustomers@AccountNumber) == true(),",
						"     disjoint: false) ~> ConditionalSplitCustomerNotMatched@(CustomerNotMatched, CustomerMatched)",
						"ConditionalSplitCustomerNotMatched@CustomerNotMatched derive(ActiveFlag = 1,",
						"          InsertedDate = currentDate()) ~> SCDColumns",
						"ExistingCustomers select(mapColumn(",
						"          CustomerPKExisting = CustomerPK,",
						"          AccountNumberExisting = AccountNumber,",
						"          FirstNameExisting = FirstName,",
						"          LastNameExisting = LastName,",
						"          AddressExisting = Address,",
						"          ZipCodeExisting = ZipCode,",
						"          NumberOfCarsOwnedExisting = NumberOfCarsOwned,",
						"          HomeOwnerFlagExisting = HomeOwnerFlag,",
						"          MarriedExisting = Married",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameExistingDSColumns",
						"ConditionalSplitCustomerNotMatched@CustomerMatched derive(IsActive = 0) ~> CreateIsActive",
						"CreateIsActive alterRow() ~> alterRow1",
						"SCDColumns sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerPK as integer,",
						"          AccountNumber as integer,",
						"          FirstName as string,",
						"          MiddleInitial as string,",
						"          LastName as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          NumberOfCarsOwned as integer,",
						"          HomeOwnerFlag as string,",
						"          Married as string,",
						"          NumberOfChildren as integer,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          ActiveFlag as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AccountNumber = ConditionalSplitCustomerNotMatched@CustomerNotMatched@AccountNumber,",
						"          FirstName = ConditionalSplitCustomerNotMatched@CustomerNotMatched@FirstName,",
						"          MiddleInitial = ConditionalSplitCustomerNotMatched@CustomerNotMatched@MiddleInitial,",
						"          LastName = ConditionalSplitCustomerNotMatched@CustomerNotMatched@LastName,",
						"          Address = ConditionalSplitCustomerNotMatched@CustomerNotMatched@Address,",
						"          City = ConditionalSplitCustomerNotMatched@CustomerNotMatched@City,",
						"          State = ConditionalSplitCustomerNotMatched@CustomerNotMatched@State,",
						"          ZipCode = ConditionalSplitCustomerNotMatched@CustomerNotMatched@ZipCode,",
						"          NumberOfCarsOwned = ConditionalSplitCustomerNotMatched@CustomerNotMatched@NumberOfCarsOwned,",
						"          HomeOwnerFlag = ConditionalSplitCustomerNotMatched@CustomerNotMatched@HomeOwnerFlag,",
						"          Married = ConditionalSplitCustomerNotMatched@CustomerNotMatched@Married,",
						"          NumberOfChildren = ConditionalSplitCustomerNotMatched@CustomerNotMatched@NumberOfChildren,",
						"          InsertedDate,",
						"          UpdatedDate,",
						"          ActiveFlag",
						"     )) ~> DestCustomers"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/CustomersDS')]",
				"[concat(variables('workspaceId'), '/datasets/DimCustomersDS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DumCustomerSCD2Load')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EmployeeFiles",
								"type": "DatasetReference"
							},
							"name": "Customers",
							"description": " Source employees file, changes every day"
						},
						{
							"dataset": {
								"referenceName": "Delete",
								"type": "DatasetReference"
							},
							"name": "DimCustomers",
							"description": "Current rows in DimEmployees DW table"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomersTmp",
								"type": "DatasetReference"
							},
							"name": "NewRows"
						},
						{
							"dataset": {
								"referenceName": "DimCustomersTmp",
								"type": "DatasetReference"
							},
							"name": "InsertNewRow"
						},
						{
							"dataset": {
								"referenceName": "DimCustomersTmp",
								"type": "DatasetReference"
							},
							"name": "ArchiveOldRow"
						}
					],
					"transformations": [
						{
							"name": "TypeConversions"
						},
						{
							"name": "TypeConversionsAndSetAttrs"
						},
						{
							"name": "LookupIDs"
						},
						{
							"name": "ConditionalSplit1"
						},
						{
							"name": "checkForChanges"
						},
						{
							"name": "SetAttrsForNew"
						},
						{
							"name": "SetAttrsInactive",
							"description": "make iscurrent 0"
						},
						{
							"name": "SetAttrsUpdate"
						},
						{
							"name": "NormNames"
						},
						{
							"name": "InactiveFields"
						},
						{
							"name": "ArchiveCustomerRec"
						},
						{
							"name": "NullFilter",
							"description": "Filter out NULLs from source file"
						},
						{
							"name": "NameNorm2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          AccountNumber as string,",
						"          FirstName as string,",
						"          MiddleInitial as string,",
						"          LastName as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          NumberOfCarsOwned as string,",
						"          HomeOwnerFlag as string,",
						"          Married as string,",
						"          NumberOfChildren as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     purgeFiles: true) ~> Customers",
						"source(output(",
						"          CustomerPK as integer,",
						"          AccountNumber as integer,",
						"          FirstName as string,",
						"          MiddleInitial as string,",
						"          LastName as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          NumberOfCarsOwned as integer,",
						"          HomeOwnerFlag as string,",
						"          Married as string,",
						"          NumberOfChildren as integer,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          ActiveFlag as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomers",
						"DimCustomers derive(AccountNumber = toInteger(AccountNumber),",
						"          CustomerPK = toInteger(CustomerPK)) ~> TypeConversions",
						"NullFilter derive(AccountNumber = toInteger(AccountNumber),",
						"          NumberOfCarsOwned = toInteger(NumberOfCarsOwned),",
						"          NumberOfChildren = toInteger(NumberOfChildren)) ~> TypeConversionsAndSetAttrs",
						"TypeConversionsAndSetAttrs, TypeConversions lookup(TypeConversionsAndSetAttrs@AccountNumber == TypeConversions@AccountNumber,",
						"     multiple: true,",
						"     broadcast: 'auto')~> LookupIDs",
						"NormNames split(isNull(iscurrent),",
						"     disjoint: false) ~> ConditionalSplit1@(NewRow, CheckForUpdates)",
						"NameNorm2, TypeConversions exists((toInteger(NameNorm2@AccountNumber) == toInteger(TypeConversions@AccountNumber)) && \r",
						"(\r",
						"   (NameNorm2@NumberOfCarsOwned != DimCustomers@NumberOfCarsOwned) || \r",
						"   (NameNorm2@NumberOfChildren != DimCustomers@NumberOfChildren) ||\r",
						"   (NameNorm2@Married != DimCustomers@Married)\r",
						"),",
						"     negate:false,",
						"     broadcast: 'auto')~> checkForChanges",
						"ConditionalSplit1@NewRow derive(iscurrent = 1,",
						"          InsertDate = currentTimestamp()) ~> SetAttrsForNew",
						"checkForChanges derive(iscurrent = 0,",
						"          UpdatedDate = currentTimestamp()) ~> SetAttrsInactive",
						"checkForChanges derive(iscurrent = 1) ~> SetAttrsUpdate",
						"LookupIDs select(mapColumn(",
						"          AccountNumber = TypeConversionsAndSetAttrs@AccountNumber,",
						"          FirstName = Customers@FirstName,",
						"          MiddleName = Customers@MiddleInitial,",
						"          LastName = Customers@LastName,",
						"          Address = Customers@Address,",
						"          City = Customers@City,",
						"          State = Customers@State,",
						"          ZipCode = Customers@ZipCode,",
						"          NumberOfCarsOwned = TypeConversionsAndSetAttrs@NumberOfCarsOwned,",
						"          HomeOwnerFlag = Customers@HomeOwnerFlag,",
						"          NumberOfChildren = TypeConversionsAndSetAttrs@NumberOfChildren,",
						"          Married = DimCustomers@Married,",
						"          iscurrent = ActiveFlag,",
						"          InsertedDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NormNames",
						"SetAttrsInactive select(mapColumn(",
						"          AccountNumber,",
						"          iscurrent,",
						"          UpdatedDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> InactiveFields",
						"InactiveFields alterRow(updateIf(true())) ~> ArchiveCustomerRec",
						"Customers filter(!isNull(AccountNumber)) ~> NullFilter",
						"ConditionalSplit1@CheckForUpdates select(mapColumn(",
						"          AccountNumber,",
						"          FirstName,",
						"          MiddleName,",
						"          LastName,",
						"          Address,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          NumberOfCarsOwned,",
						"          HomeOwnerFlag,",
						"          NumberOfChildren,",
						"          Married,",
						"          iscurrent,",
						"          InsertedDate",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> NameNorm2",
						"SetAttrsForNew sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerPK as integer,",
						"          AccountNumber as integer,",
						"          FirstName as string,",
						"          MiddleInitial as string,",
						"          LastName as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          NumberOfCarsOwned as integer,",
						"          HomeOwnerFlag as string,",
						"          Married as string,",
						"          NumberOfChildren as integer,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          ActiveFlag as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AccountNumber,",
						"          FirstName,",
						"          MiddleInitial = MiddleName,",
						"          LastName,",
						"          Address,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          NumberOfCarsOwned,",
						"          HomeOwnerFlag,",
						"          Married,",
						"          NumberOfChildren,",
						"          InsertedDate,",
						"          ActiveFlag = iscurrent",
						"     )) ~> NewRows",
						"SetAttrsUpdate sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerPK as integer,",
						"          AccountNumber as integer,",
						"          FirstName as string,",
						"          MiddleInitial as string,",
						"          LastName as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          NumberOfCarsOwned as integer,",
						"          HomeOwnerFlag as string,",
						"          Married as string,",
						"          NumberOfChildren as integer,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          ActiveFlag as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AccountNumber,",
						"          FirstName,",
						"          MiddleInitial = MiddleName,",
						"          LastName,",
						"          Address,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          NumberOfCarsOwned,",
						"          HomeOwnerFlag,",
						"          Married,",
						"          NumberOfChildren,",
						"          InsertedDate,",
						"          ActiveFlag = iscurrent",
						"     )) ~> InsertNewRow",
						"ArchiveCustomerRec sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerPK as integer,",
						"          AccountNumber as integer,",
						"          FirstName as string,",
						"          MiddleInitial as string,",
						"          LastName as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          NumberOfCarsOwned as integer,",
						"          HomeOwnerFlag as string,",
						"          Married as string,",
						"          NumberOfChildren as integer,",
						"          InsertedDate as timestamp,",
						"          UpdatedDate as timestamp,",
						"          ActiveFlag as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['AccountNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AccountNumber,",
						"          UpdatedDate,",
						"          ActiveFlag = iscurrent",
						"     )) ~> ArchiveOldRow"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/EmployeeFiles')]",
				"[concat(variables('workspaceId'), '/datasets/Delete')]",
				"[concat(variables('workspaceId'), '/datasets/DimCustomersTmp')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/GenericSCDType2')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "GenericSCD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "GenericDataset",
								"type": "DatasetReference"
							},
							"name": "GenericInput"
						},
						{
							"dataset": {
								"referenceName": "SqlDimension",
								"type": "DatasetReference"
							},
							"name": "ExistingDimensionTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SqlDimension",
								"type": "DatasetReference"
							},
							"name": "DimensionTableSink"
						}
					],
					"transformations": [
						{
							"name": "NewAndUpdatedRows"
						},
						{
							"name": "AddHashInput"
						},
						{
							"name": "AddHashExisting"
						},
						{
							"name": "GetMaxSurrogateKey"
						},
						{
							"name": "AddKey"
						},
						{
							"name": "JoinWithMaxSurrogateKey"
						},
						{
							"name": "AddDimensionColumns"
						},
						{
							"name": "FilterForUpdatedValues"
						},
						{
							"name": "UpdateObsolete"
						},
						{
							"name": "DropUnwantedColsInput"
						},
						{
							"name": "UnionAllData"
						},
						{
							"name": "MarkAsUpdate"
						},
						{
							"name": "DropUnwantedColumns"
						},
						{
							"name": "MarkAsInsert"
						},
						{
							"name": "FilterForActive"
						}
					],
					"script": "parameters{\n\tPrimaryKey as string ('ID'),\n\tColumns as string ('Player,Team,Salary')\n}\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> GenericInput\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ExistingDimensionTable\nAddHashInput, AddHashExisting exists(AddHashInput@id_hash == AddHashExisting@id_hash\n\t&& AddHashInput@columns_hash == AddHashExisting@columns_hash,\n\tnegate:true,\n\tbroadcast: 'auto')~> NewAndUpdatedRows\nGenericInput derive(id_hash = md5(byName($PrimaryKey)),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashInput\nFilterForActive derive(id_hash = md5(byNames(split($PrimaryKey,','))),\n\t\tcolumns_hash = md5(byNames(split($Columns,',')))) ~> AddHashExisting\nAddHashExisting aggregate(MaxSurrogateKey = max(toInteger(byName('Key')))) ~> GetMaxSurrogateKey\nNewAndUpdatedRows keyGenerate(output(Key as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> AddKey\nAddKey, GetMaxSurrogateKey join(Key == MaxSurrogateKey || true(),\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'right')~> JoinWithMaxSurrogateKey\nJoinWithMaxSurrogateKey derive(Key = Key + MaxSurrogateKey,\n\t\tActive = 1,\n\t\tActiveStartTime = currentUTC(),\n\t\tActiveEndTime = toTimestamp(toString(null()))) ~> AddDimensionColumns\nAddHashExisting, NewAndUpdatedRows exists(AddHashExisting@id_hash == AddHashInput@id_hash,\n\tnegate:false,\n\tbroadcast: 'auto')~> FilterForUpdatedValues\nFilterForUpdatedValues derive(Active = 0,\n\t\tActiveEndTime = currentUTC()) ~> UpdateObsolete\nAddDimensionColumns select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColsInput\nMarkAsInsert, DropUnwantedColumns union(byName: true)~> UnionAllData\nUpdateObsolete alterRow(updateIf(true())) ~> MarkAsUpdate\nMarkAsUpdate select(mapColumn(\n\t\teach(match(!in(['id_hash','columns_hash','MaxSurrogateKey'],name)))\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DropUnwantedColumns\nDropUnwantedColsInput alterRow(insertIf(true())) ~> MarkAsInsert\nExistingDimensionTable filter(toInteger(byName('Active')) == 1) ~> FilterForActive\nUnionAllData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:[($PrimaryKey)],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DimensionTableSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/GenericDataset')]",
				"[concat(variables('workspaceId'), '/datasets/SqlDimension')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/hedukspcore')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 20
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 3,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "ukwest"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/HEDCoreMaxMinDW_New')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "ukwest"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TaxiWareHouse')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "ukwest"
		}
	]
}